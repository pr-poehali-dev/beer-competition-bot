import json
import os
from typing import Dict, Any
import psycopg2
from psycopg2.extras import RealDictCursor
import urllib.request
import urllib.parse

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Telegram bot webhook handler for beer competition
    Args: event with httpMethod, body containing Telegram updates
    Returns: HTTP response with bot replies
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    update = json.loads(event.get('body', '{}'))
    
    if 'message' not in update:
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'ok': True})
        }
    
    message = update['message']
    chat_id = message['chat']['id']
    user_id = message['from']['id']
    username = message['from'].get('username', '–ò–≥—Ä–æ–∫')
    first_name = message['from'].get('first_name', '–ò–≥—Ä–æ–∫')
    text = message.get('text', '')
    
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    db_url = os.environ.get('DATABASE_URL')
    
    conn = psycopg2.connect(db_url)
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute(
        "SELECT * FROM users WHERE telegram_id = %s",
        (user_id,)
    )
    user = cur.fetchone()
    
    if not user:
        cur.execute(
            "INSERT INTO users (telegram_id, username, first_name, chat_id) VALUES (%s, %s, %s, %s) RETURNING *",
            (user_id, username, first_name, chat_id)
        )
        user = cur.fetchone()
        conn.commit()
    
    response_text = ""
    
    if text == '/start':
        response_text = f"üç∫ –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–∏–≤–Ω–æ–π –¢—É—Ä–Ω–∏—Ä!\n\n–¢–≤–æ–∏ –ø–æ–ø—ã—Ç–∫–∏: {user['attempts']}\n–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {user['total_beers']} –º–ª\n\n–ö–æ–º–∞–Ω–¥—ã:\n/pivo - –≤—ã–ø–∏—Ç—å –ø–∏–≤–∞\n/top - —Ç–æ–ø —á–∞—Ç–∞\n/global - –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø\n/buy - –∫—É–ø–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏\n/help - —Å–ø—Ä–∞–≤–∫–∞"
    
    elif text == '/pivo':
        if user['attempts'] <= 0:
            response_text = "üò¢ –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏!\n\n–ö—É–ø–∏ –µ—â—ë –∫–æ–º–∞–Ω–¥–æ–π /buy"
        else:
            import random
            amount = random.randint(100, 600)
            
            cur.execute(
                "UPDATE users SET attempts = attempts - 1, total_beers = total_beers + %s WHERE telegram_id = %s",
                (amount, user_id)
            )
            cur.execute(
                "INSERT INTO beer_drinks (user_id, amount) VALUES ((SELECT id FROM users WHERE telegram_id = %s), %s)",
                (user_id, amount)
            )
            conn.commit()
            
            new_attempts = user['attempts'] - 1
            new_total = user['total_beers'] + amount
            
            response_text = f"üç∫ –¢—ã –≤—ã–ø–∏–ª {amount} –º–ª –ø–∏–≤–∞!\n\n‚ú® –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {new_attempts}\nüìä –í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {new_total} –º–ª"
    
    elif text == '/top':
        cur.execute(
            "SELECT first_name, total_beers FROM users WHERE chat_id = %s ORDER BY total_beers DESC LIMIT 10",
            (chat_id,)
        )
        top_users = cur.fetchall()
        
        response_text = "üèÜ –¢–æ–ø —á–∞—Ç–∞:\n\n"
        medals = ['ü•á', 'ü•à', 'ü•â']
        for i, u in enumerate(top_users):
            medal = medals[i] if i < 3 else f"{i+1}."
            response_text += f"{medal} {u['first_name']} - {u['total_beers']} –º–ª\n"
    
    elif text == '/global':
        cur.execute(
            "SELECT first_name, total_beers FROM users ORDER BY total_beers DESC LIMIT 10"
        )
        global_users = cur.fetchall()
        
        response_text = "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø:\n\n"
        medals = ['ü•á', 'ü•à', 'ü•â']
        for i, u in enumerate(global_users):
            medal = medals[i] if i < 3 else f"{i+1}."
            response_text += f"{medal} {u['first_name']} - {u['total_beers']} –º–ª\n"
    
    elif text == '/buy':
        response_text = "‚≠ê –ú–∞–≥–∞–∑–∏–Ω –ø–æ–ø—ã—Ç–æ–∫:\n\n1Ô∏è‚É£ 1 –ø–æ–ø—ã—Ç–∫–∞ - 5 –∑–≤—ë–∑–¥\n3Ô∏è‚É£ 3 –ø–æ–ø—ã—Ç–∫–∏ - 10 –∑–≤—ë–∑–¥ (–≤—ã–≥–æ–¥–Ω–æ!)\nüîü 10 –ø–æ–ø—ã—Ç–æ–∫ - 25 –∑–≤—ë–∑–¥\n\nüí° –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars"
    
    elif text == '/admin':
        if user['is_admin']:
            cur.execute("SELECT COUNT(*) as count FROM users")
            total_users = cur.fetchone()['count']
            
            cur.execute("SELECT SUM(total_beers) as total FROM users")
            total_beers = cur.fetchone()['total'] or 0
            
            response_text = f"üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\nüë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {total_users}\nüç∫ –í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {total_beers} –º–ª ({total_beers/1000:.1f} –ª)"
        else:
            response_text = "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    
    elif text == '/help':
        response_text = "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/pivo - –≤—ã–ø–∏—Ç—å –ø–∏–≤–∞ üç∫\n/top - —Ç–æ–ø —á–∞—Ç–∞ üèÜ\n/global - –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø üåç\n/buy - –º–∞–≥–∞–∑–∏–Ω –ø–æ–ø—ã—Ç–æ–∫ ‚≠ê\n/admin - –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üõ°Ô∏è"
    
    else:
        response_text = "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    
    cur.close()
    conn.close()
    
    if bot_token:
        telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = urllib.parse.urlencode({
            'chat_id': chat_id,
            'text': response_text
        }).encode()
        
        req = urllib.request.Request(telegram_url, data=data)
        try:
            urllib.request.urlopen(req)
        except Exception:
            pass
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'application/json'},
        'body': json.dumps({'ok': True})
    }
